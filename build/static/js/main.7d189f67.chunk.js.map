{"version":3,"sources":["components/Filter.js","services/personService.js","components/PersonsForm.js","components/Persons.js","components/Message.js","components/Error.js","App.js","serviceWorker.js","index.js"],"names":["Filter","filter","setFilter","persons","setPersons","value","onChange","event","target","result","person","name","toLowerCase","includes","baseUrl","Axios","get","then","response","data","newPerson","post","id","delete","put","PersonsForm","setError","setMessage","newName","setNewName","newNumber","setNewNumber","onSubmit","preventDefault","number","nameFound","find","window","confirm","personService","allPersons","setTimeout","catch","error","newPersons","type","Persons","map","key","style","width","display","onClick","deletePerson","Message","message","fontSize","color","backgroundColor","border","borderColor","textAlign","Error","App","useState","useEffect","margin","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.7d189f67.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Filter = ({filter, setFilter, persons, setPersons}) => {\r\n\r\n    const handleFilter = (event) => {\r\n\r\n        setFilter(event.target.value)\r\n        const result = persons.filter(person => person.name.toLowerCase().includes(filter.toLowerCase()))\r\n        setPersons(result)\r\n\r\n      }\r\n        \r\n    return (<div>filter shown with: <input value={filter} onChange={handleFilter} /> </div>)\r\n}\r\n\r\nexport default Filter","import Axios from 'axios';\r\nconst baseUrl = 'http://protected-headland-68853.herokuapp.com/api/persons';\r\n\r\nconst getAllPersons = () => {\r\n    const request = Axios.get(baseUrl);\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst addPerson = (newPerson) => {\r\n    const request = Axios.post(baseUrl, newPerson);\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst deletePerson = (id) => {\r\n    const request = Axios.delete(`${baseUrl}/${id}`)\r\n    return request\r\n}\r\n\r\nconst updatePerson = (person, newPerson) => {\r\n    const request = Axios.put(`${baseUrl}/${person.id}`, newPerson)\r\n    return request.then((response) => response.data)\r\n}\r\n\r\n\r\nexport default {getAllPersons, addPerson, deletePerson, updatePerson}","import React from 'react'\r\nimport Axios from 'axios'\r\nimport personService from '../services/personService'\r\n\r\n\r\nconst PersonsForm = ({setError, setMessage, persons, newName, setNewName, newNumber, setNewNumber, setPersons}) => {\r\n\r\n    const handleNewName = (event) => {\r\n        setNewName(event.target.value)\r\n      }\r\n    \r\n      const handleNewNumber = (event) => {\r\n        setNewNumber(event.target.value)\r\n      }\r\n    \r\n    \r\n\r\n    const addNew = (event) => {\r\n        event.preventDefault();\r\n        const newPerson = {\r\n          name: newName,\r\n          number: newNumber\r\n        }\r\n        const nameFound = (persons.find(person => person.name === newPerson.name))\r\n    \r\n        if(nameFound) {\r\n         if (window.confirm(`${newPerson.name} is already added to the phonebook, replace the old number with the new one?`)){\r\n           personService.updatePerson(nameFound, newPerson)\r\n            .then((response) => \r\n            personService\r\n            .getAllPersons()\r\n              .then(allPersons => {\r\n                setPersons(allPersons)\r\n                setMessage(`Changed ${nameFound.name}`)\r\n                setTimeout(() => {\r\n                  setMessage('')\r\n                }, 5000)\r\n              }))\r\n            .catch((error) => {\r\n              setError(`Information of ${nameFound.name} has already been deleted`)\r\n              setTimeout(() => {\r\n                setError('')\r\n              }, 5000)\r\n            })\r\n         }\r\n          setNewName('');\r\n          setNewNumber('');\r\n        }else {\r\n          personService.addPerson(newPerson)\r\n            .then((newPersons)=> {\r\n              setPersons(newPersons);\r\n              setMessage(`Added ${newPerson.name}`)\r\n              setTimeout(() => {\r\n                setMessage('')\r\n              }, 5000)\r\n              setNewName('');\r\n              setNewNumber('');\r\n            })\r\n\r\n        }\r\n      }\r\n    \r\n\r\n    return (\r\n        <form onSubmit={addNew}>\r\n        <div> name: <input onChange={handleNewName} value={newName} /> </div>\r\n        <div> number: <input onChange={handleNewNumber} value={newNumber} /> </div>\r\n        <div>\r\n          <button type=\"submit\">add</button>\r\n        </div>\r\n      </form>\r\n    )\r\n}\r\n\r\n\r\nexport default PersonsForm","import React from 'react'\r\nimport personService from '../services/personService'\r\n\r\nconst Persons = ({setMessage, persons, setPersons}) => {\r\n\r\nconst deletePerson = (person) => {\r\n    if(window.confirm(`Do you want to delete ${person.name} from the phonebook?`)) {\r\n        personService.deletePerson(person.id)\r\n        .then(() => {\r\n            personService.getAllPersons()\r\n            .then((allPersons) => {\r\n                setPersons(allPersons)\r\n                setMessage(`Deleted ${person.name}`)\r\n                setTimeout(() => {\r\n                  setMessage('')\r\n                }, 5000)\r\n            })\r\n        })\r\n    }\r\n\r\n}\r\n    \r\nreturn(\r\n    persons.map(person => \r\n        <div key={person.id}><p style={{width: \"50%\",display:\"inline\"}} key={person.name}>{person.name} {person.number}</p><button onClick={(() => {deletePerson(person)})}>Delete</button></div>)\r\n)\r\n}\r\n\r\nexport default Persons","import React from 'react'\r\n\r\nconst Message = ({message}) => {\r\n\r\n    const style = {\r\n        fontSize: 50,\r\n        color: 'green',\r\n        backgroundColor: 'gray',\r\n        border: '10px solid',\r\n        borderColor: 'green',\r\n        textAlign: 'center'\r\n    }\r\n\r\n    if (message === '') {\r\n        \r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div style={style}>\r\n            {message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message","import React from 'react'\r\n\r\nconst Error = ({error}) => {\r\n\r\n    const style = {\r\n        fontSize: 50,\r\n        color: 'red',\r\n        backgroundColor: 'gray',\r\n        border: '10px solid',\r\n        borderColor: 'red',\r\n        textAlign: 'center'\r\n    }\r\n\r\n    if (error === '') {\r\n        \r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div style={style}>\r\n            {error}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Error","import React, { useState, useEffect } from 'react'\nimport Filter from './components/Filter'\nimport PersonsForm from './components/PersonsForm'\nimport Persons from './components/Persons'\nimport personService from './services/personService'\nimport Message from './components/Message'\nimport Error from './components/Error'\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber] = useState('')\n  const [ filter, setFilter ] = useState('')\n  const [ message, setMessage ] = useState('')\n  const [ error, setError ] = useState('')\n\n  useEffect(() => {\n    personService\n    .getAllPersons()\n      .then(allPersons => {\n        setPersons(allPersons)\n      })\n  }, [])\n\n\n  return (\n    <div style={{width: \"50%\", margin: \"auto\"}}>\n      <h2>Phonebook</h2>\n      <Message message={message}/>\n      <Error error={error}/>\n      <Filter filter={filter} setFilter={setFilter} persons={persons} setPersons={setPersons} />\n      <h2>add a new</h2>\n      <PersonsForm setError={setError}  message={message} persons={persons} newName={newName} setNewName={setNewName} newNumber={newNumber} setNewNumber={setNewNumber} setPersons={setPersons} setMessage={setMessage} />\n      <h2>Numbers</h2>\n      <Persons setMessage={setMessage} persons={persons} setPersons={setPersons}/>\n      \n    </div>\n    \n  )\n\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}